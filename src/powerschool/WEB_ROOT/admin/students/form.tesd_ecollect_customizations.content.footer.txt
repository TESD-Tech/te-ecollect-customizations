<!-- BEGIN form.tesd_ecollect_customizations.content.footer.txt -->
<script src="/scripts/psQuery/psQuery.js"></script>
<script type="text/javascript">
	function sendStudentScheduleEmail() {

		let parentEmail = prompt('Parent Email');

		if (parentEmail) {

			const data = {
				"from": "noreply@tesd.net",
				"mailto": parentEmail,
				"subject": "TESD Form Follow-up for ~(first_name) ~(last_name)",
				"body": `<p>Your recently submitted PowerSchool form requires additional clarification. Please visit <a target="_blank" href="https://powerschool.tesd.net">PowerSchool</a> and click TESD Forms for details.</p><<br>Thanks!`,
				"ac": "mail"
			};


			console.log('Sending data');

			const XHR = new XMLHttpRequest();

			const urlEncodedDataPairs = [];

			// Turn the data object into an array of URL-encoded key/value pairs.
			for (const [name, value] of Object.entries(data)) {
				urlEncodedDataPairs.push(`${encodeURIComponent(name)}=${encodeURIComponent(value)}`);
			}

			// Combine the pairs into a single string and replace all %-encoded spaces to
			// the '+' character; matches the behavior of browser form submissions.
			const urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');

			// Define what happens on successful data submission
			XHR.addEventListener('load', (event) => {
				alert('Email sent.');
			});

			// Define what happens in case of error
			XHR.addEventListener('error', (event) => {
				alert('Oops! Something went wrong.');
			});

			// Set up our request
			XHR.open('POST', '/admin/changesrecorded.white_nf.html');

			// Add the required HTTP header for form data POST requests
			XHR.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

			// Finally, send our data.
			XHR.send(urlEncodedData);
		}
	}

</script>

~[if.~(gpv.emailSent)=true]<div class="feedback-confirm">Email sent.</div>[/if]
~[if.~[x:loginusername]=benjamin]

<form id="tesd_form"
	action="~[if#guardianPortal.~[directory]=guardian]/guardian/changesrecorded.html[else#guardianPortal]/admin/changesrecorded.white.html?frn=~(studentfrn)[/if#guardianPortal]"
	method="POST">
	<div style="display: none;" id="emailthis">
		From <input type="text" name="from" value="noreply@tesd.net" size=75>
		To <input type="text" name="mailto" value="" id="mailtoaddress" size=75>
		Subject <input type="text" name="subject" value="" size=35>
		Message <input id="pt_embody" name="body" value=''>
		<input type="hidden" id="mailout" type="text" name="ac" value="mail">
	</div>
</form>


<script>
	$j('#student_detail_header').prepend('<button id="send_student_email" onclick="sendStudentScheduleEmail()">Send Rejection Email</button>');
</script>
[/if]

<script>
	// Close the pending notification & add Approve - OK button
	function init() {
		// Create a new button
		var button = document.createElement('button');

		// Set the button's properties
		button.textContent = 'Approve - OK';
		button.id = 'approve-ok-btn';
		button.setAttribute('onclick', 'approveWithPassword()');
		// button.className = 'btn btn-info btn-sm';

		// Append the button to the ".subButton" div
		document.querySelector('.subButton').appendChild(button);

		// Create a new observer
		var observer = new MutationObserver(function (mutations) {
			mutations.forEach(function (mutation) {
				if (mutation.addedNodes.length) {
					for (var i = 0; i < mutation.addedNodes.length; i++) {
						var node = mutation.addedNodes[i];
						// Check if the node is an element
						if (node.nodeType === Node.ELEMENT_NODE) {
							// If the node has the 'sweet-alert' class
							if (node.classList.contains('sweet-alert')) {
								document.querySelector('.confirm').click();
								observer.disconnect();
								return;
							}
						}
					}
				}
			});
		});

		// Start observing
		observer.observe(document.body, {
			childList: true,
			subtree: true
		});
	}

	function approveWithPassword() {
		console.log('Approving with password');
		document.getElementById('student-form-approve-btn').click();

		// Create a new observer
		var observer = new MutationObserver(function (mutations) {
			// For each mutation
			mutations.forEach(function (mutation) {
				// If the addedNodes property has one or more nodes
				if (mutation.addedNodes.length) {
					// Check each node
					for (var i = 0; i < mutation.addedNodes.length; i++) {
						var node = mutation.addedNodes[i];
						// Check if the node is an element
						if (node.nodeType === Node.ELEMENT_NODE) {
							// If the node or its descendants has the 'modal-body' class
							if (node.classList.contains('modal-body') || node.querySelector('.modal-body')) {
								// Find the password input within the node
								var pw = node.querySelector('#password');
								if (pw) {
									// Focus the password input and set its value
									pw.focus();
									pw.value = 'ok';
									pw.dispatchEvent(new Event('change'));
								}
							}
							// If the node or its descendants has the 'modal-footer' class
							if (node.classList.contains('modal-footer') || node.querySelector('.modal-footer')) {
								// Find the approve button within the node
								var approveButton = node.querySelector('.btn.btn-primary.ng-binding');
								if (approveButton) {
									// Click the approve button
									approveButton.click();
									// Stop observing
									observer.disconnect();
									return;
								}
							}
						}
					}
				}
			});
		});

		// Start observing
		observer.observe(document.body, {
			childList: true,
			subtree: true
		});
	}

	init()
</script>

<script>
	// This was created using Vance M. Allen's code as a base, and then refactored to work with the Ecollect form.html page.\
// Vance's code is copyrighted by Vance M. Allen, so I am not able to share it.

// ==UserScript==
// @name           PowerSchool Document Preview (Final - JSON)
// @match          *://your-powerschool-server.com/admin/students/form.html*  // CHANGE THIS
// @grant          none
// ==UserScript==

(function() {
    'use strict';

    // CSS (same as before)
    let style = document.createElement('style');
    style.textContent = `
        #vmaPreviewAttachment {
            height: 80vh;
            width: 90vw;
        }

        #vmaPreviewAttachment :first-child {
            max-width: 100%;
        }

        #vmaPreviewAttachment iframe {
            height: 100%;
            width: 100%;
        }
    `;
    document.head.appendChild(style);

    // Function to add the preview button and set up the click handler
    function addPreviewFunctionality() {
        // Insert Preview Button
        $j('a.filenamepadding').before(`<button
            class="vmaPreviewDoc button"
            type="button"
            title="Preview Document"
            >
            <em class="ui-icon ui-icon-mail-open-1-s"></em>
        </button>`);

        // Click Handler
        $j('.uploadwidth').on('click', '.vmaPreviewDoc', function() {
            let $fileLink = $j(this).next('a.filenamepadding');
            let scope = angular.element($fileLink).scope();
            //let elementResponse = scope.element.response; // Not used, can remove.
            let fileName = $fileLink.text();

            // 1. Get entityId from URL
            let frn = window.location.search.match(/frn=(\d+)/)[1];
            let entityId = frn.slice(3);

            // 2. Fetch Document List (First XHR Request - JSON Response)
            let listUrl = `/ws/k12drive/document?entityid=${entityId}&entityname=STCM&q=status==active`;

            let listXhr = new XMLHttpRequest();
            listXhr.open('GET', listUrl);
            listXhr.setRequestHeader("Accept", "application/json, text/plain, */*");

            listXhr.addEventListener('readystatechange', function() {
                if (this.readyState === 4) {
                    if (this.status === 200) {
                        // Parse the JSON response
                        let docList = null;
                        try {
                            docList = JSON.parse(this.responseText).documents.documentList;
                        } catch (error) {
                            console.error("Error parsing JSON:", error);
                            alert('An error occurred while fetching document data.');
                            return;
                        }

                        // 3. Find the Correct Document (JSON Traversal)
                        let targetDoc = null;

                        if (Array.isArray(docList)) {
                            for (let doc of docList) {
                                if (doc.name.trim() === fileName.trim()) {
                                    targetDoc = doc.id;
                                    break;
                                }
                            }
                        } else if (docList && docList.name && docList.name.trim() === fileName.trim()) {
                            targetDoc = docList.id;
                        }

                        if (!targetDoc) {
                            alert('Could not find document metadata.');
                            return;
                        }

                        // 4. Fetch Document Content (Second XHR Request)
                        let contentUrl = `/ws/k12drive/document/content/${targetDoc}`;
                        psAlert({
                            message: `<div id="vmaPreviewAttachment">
                                <div class="progress" data-pss-wait-spinner="">
                                    <div></div>
                                </div>
                            </div>`,
                            title: fileName
                        });

                        let contentXhr = new XMLHttpRequest();
                        contentXhr.open('GET', contentUrl);
                        contentXhr.overrideMimeType('text/plain; charset=x-user-defined');
                        contentXhr.addEventListener('readystatechange', function() {
                            if (this.readyState === 4 && this.status === 200) {
                                let $a = $j('#vmaPreviewAttachment');
                                let binary = '';
                                let contentType = this.getResponseHeader('content-type');
                                let response = this.responseText;
                                let tag;

                                for (let i = 0; i < response.length; i++) {
                                    binary += String.fromCharCode(response.charCodeAt(i) & 0xff);
                                }
                                let encoded = btoa(binary);

                                // Determine how we need to render the content.
                                if (contentType === 'application/pdf') { tag = 'iframe'; }
                                if (/^image/.test(contentType)) { tag = 'img'; }
                                if (/^text/.test(contentType)) { tag = 'iframe'; }

                                // If unable to determine tag, error out.
                                if (!tag) {
                                    $a.html(`<h3>Sorry</h3><p>
                                        We were unable to preview this attachment.
                                    </p>`);
                                    console.error(`Unhandled attachment content type "${contentType}".`);
                                    return;
                                }

                                // Load the attachment into the preview window.
                                $a.html(
                                    `<${tag} src="data:${contentType};base64,${encoded}">` +
                                    (tag === 'img' ? '' : `</${tag}>`)
                                );
                            }
                        });
                        contentXhr.send();
                    } else if (this.status === 404) {
                        // Handle the 404 response
                        alert("No documents found for this student.");
                        return; // Stop execution
                    } else {
                        //Handle other errors.
                        console.error("Error fetching document list:", this.status, this.statusText);
                        alert('An error occurred while fetching the document list.');
                        return;
                    }
                }
            });
            listXhr.send();
        });
    }


    // Function to wait for an element to be present
    function waitForElement(selector, callback) {
        let el = document.querySelector(selector);
        if (el) {
            callback(el);
        } else {
            let observer = new MutationObserver(mutations => {
                el = document.querySelector(selector);
                if (el) {
                    callback(el);
                    observer.disconnect();
                }
            });
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    }

    // Wait for the form container to be loaded before adding the preview functionality
    waitForElement('#formcontainer', function(formContainer) {
        // Now that the form container is loaded, add the preview functionality
        addPreviewFunctionality();
    });

})();

</script>

<!-- END form.tesd_ecollect_customizations.content.footer.txt -->